name: Staging Deployment

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        type: string

jobs:
  # Deploy to Firebase App Distribution (Android)
  deploy-android-staging:
    name: Deploy Android to Firebase App Distribution
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ${{ runner.tool_cache }}/flutter
        key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          flutter-${{ runner.os }}-

    - name: Install dependencies
      run: flutter pub get

    - name: Create local.properties
      run: |
        echo "flutter.sdk=$FLUTTER_ROOT" > android/local.properties
        echo "sdk.dir=/usr/local/lib/android/sdk" >> android/local.properties

    - name: Build APK for staging
      run: flutter build apk --debug --target-platform android-arm64 --dart-define=ENVIRONMENT=staging

    - name: Upload to Firebase App Distribution
      run: |
        firebase appdistribution:distribute build/app/outputs/flutter-apk/app-debug.apk \
          --app ${{ secrets.FIREBASE_APP_ID_ANDROID }} \
          --groups "testers" \
          --release-notes "Staging build from commit ${GITHUB_SHA::8}"
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Deploy to TestFlight (iOS)
  deploy-ios-staging:
    name: Deploy iOS to TestFlight
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ${{ runner.tool_cache }}/flutter
        key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          flutter-${{ runner.os }}-

    - name: Install dependencies
      run: flutter pub get

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.APP_STORE_CERTIFICATES_P12 }}
        p12-password: ${{ secrets.APP_STORE_CERTIFICATES_PASSWORD }}

    - name: Download Provisioning Profiles
      run: |
        echo "${{ secrets.APP_STORE_PROVISIONING_PROFILE }}" | base64 -d > ~/provisioning_profile.mobileprovision

    - name: Install Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp ~/provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    - name: Update Xcode project settings
      run: |
        sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = "";/PROVISIONING_PROFILE_SPECIFIER = "${{ secrets.APP_STORE_PROVISIONING_PROFILE_NAME }}";/g' ios/Runner.xcodeproj/project.pbxproj
        sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ secrets.APP_STORE_TEAM_ID }}";/g' ios/Runner.xcodeproj/project.pbxproj

    - name: Build iOS
      run: flutter build ios --release --no-codesign --dart-define=ENVIRONMENT=staging

    - name: Create IPA
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/Runner.xcarchive archive
        xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/Runner -exportOptionsPlist ../ExportOptions.plist

    - name: Upload to TestFlight
      run: |
        xcrun altool --upload-app -f build/Runner/Runner.ipa -u ${{ secrets.APP_STORE_CONNECT_USERNAME }} -p ${{ secrets.APP_STORE_CONNECT_PASSWORD }} --type ios

  # Deploy Web to Firebase Hosting (Staging)
  deploy-web-staging:
    name: Deploy Web to Firebase Hosting (Staging)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ${{ runner.tool_cache }}/flutter
        key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          flutter-${{ runner.os }}-

    - name: Install dependencies
      run: flutter pub get

    - name: Build Web (Staging)
      run: flutter build web --release --dart-define=ENVIRONMENT=staging

    - name: Setup Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy to Firebase Hosting (Staging Channel)
      run: |
        firebase hosting:channel:deploy staging --project ${{ secrets.FIREBASE_PROJECT_ID }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Update staging environment configuration
  update-staging-config:
    name: Update Staging Configuration
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Firebase CLI
      run: npm install -g firebase-tools

    - name: Update Remote Config for Staging
      run: |
        firebase functions:config:set app.environment="staging" app.version="${{ github.sha }}" --project ${{ secrets.FIREBASE_PROJECT_ID }}
        firebase deploy --only functions:config --project ${{ secrets.FIREBASE_PROJECT_ID }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Notify stakeholders
  notify-staging:
    name: Notify Staging Deployment
    runs-on: ubuntu-latest
    needs: [deploy-android-staging, deploy-ios-staging, deploy-web-staging, update-staging-config]
    if: always()

    steps:
    - name: Send Slack notification
      run: |
        echo "Staging deployment completed"
        # Add Slack webhook notification here
        # curl -X POST -H 'Content-type: application/json' --data '{"text":"Staging deployment completed for Mayegue App"}' ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create deployment summary
      run: |
        echo "## Staging Deployment Summary" > deployment-summary.md
        echo "- Commit: ${GITHUB_SHA}" >> deployment-summary.md
        echo "- Branch: ${GITHUB_REF}" >> deployment-summary.md
        echo "- Timestamp: $(date)" >> deployment-summary.md
        echo "- Status: ${{ job.status }}" >> deployment-summary.md

    - name: Upload deployment summary
      uses: actions/upload-artifact@v3
      with:
        name: staging-deployment-summary
        path: deployment-summary.md
